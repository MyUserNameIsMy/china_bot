import { Injectable } from '@nestjs/common';
import {
  Action,
  Ctx,
  Hears,
  InjectBot,
  Scene,
  SceneEnter,
} from 'nestjs-telegraf';
import { SceneContext } from 'telegraf/typings/scenes';
import { BotService } from '../bot.service';
import { ISession } from '../../../common/interfaces/session.interface';
import { Context, Telegraf } from 'telegraf';

@Injectable()
@Scene('base')
export class BaseScene {
  constructor(
    private readonly botService: BotService,
    @InjectBot() private readonly bot: Telegraf<Context>,
  ) {}

  @SceneEnter()
  async enter(@Ctx() ctx: SceneContext) {
    try {
      const student = {
        firstname: ctx.from.first_name,
        lastname: ctx.from.last_name,
        telegram_nick: ctx.from.username,
        telegram_id: ctx.from.id,
      };
      const student_system = await this.botService.getStudent(
        student.telegram_id,
      );
      if (student_system.status == 'active') {
        ctx.session['student_id'] = student_system.id;
        ctx.session['hm_channel'] = student_system['kurator_id']['channel_id'];
        await this.botService.updateStudent(student, student_system.id);
        await ctx.reply('M–µ–Ω—é', {
          reply_markup: await this.botService.showMenuButtons(),
        });
      } else {
        await ctx.reply(
          '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π. –°–≤—è–∂–∏—Ç–µ—Å—å —Å https://t.me/DoubledBo',
        );
        await this.botService.forwardToAdmin(
          student.telegram_id + ' ' + student.telegram_nick + ' –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π',
        );
      }
    } catch (err) {
      console.log(err.message);
    }
  }

  @Hears('/menu')
  async returnBase(@Ctx() ctx: SceneContext) {
    await ctx.scene.enter('base');
  }

  @Hears('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
  async returnBase2(@Ctx() ctx: SceneContext) {
    await ctx.scene.enter('base');
  }

  @Action(/submit-homework/)
  async onSubmitHomework(@Ctx() ctx: SceneContext) {
    try {
      await ctx.deleteMessage();
      await ctx.reply(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.\nüî¥ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—à–ª–æ.\nüü¢ –æ–∑–Ω–∞—á–∞–µ—Ç –º–æ–∂–Ω–æ –µ—â–µ —Å–¥–∞–≤–∞—Ç—å.\n–ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π, —Ç–æ –≤–∞–º –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ.',
        {
          reply_markup: await this.botService.chooseHomework(
            ctx.session['student_id'],
          ),
        },
      );
    } catch (err) {
      console.error(err.message);
    }
  }

  @Action(/hm-/)
  async onChooseHomework(@Ctx() ctx: SceneContext & ISession) {
    try {
      await ctx.deleteMessage();
      ctx.session['hm'] = ctx.update['callback_query']['data'];
      const hm = ctx.update['callback_query']['data'];
      const hm_id = hm.replace(/\D/g, '');
      const homework = await this.botService.getHomework(hm_id);
      const day = new Date();
      await ctx.reply(
        `*–°—Ä–æ–∫ —Å–¥–∞—á–∏ –¥–æ ${new Date(homework.due_to).toDateString()}*`,
        { parse_mode: 'Markdown' },
      );
      await ctx.reply(homework.homework_id.description);
      if (homework.due_to < day) {
        await ctx.replyWithHTML(`*–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ.*`, {
          parse_mode: 'Markdown',
        });
        await ctx.scene.enter('base');
      } else {
        await ctx.reply(
          '**–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞** *–ú–µ–Ω—é* **–∏ –≤—ã–±–µ—Ä–∏—Ç–µ** *–ú–µ–Ω—é –±–æ—Ç–∞* **–∏–ª–∏** *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*. *–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–¥–∞—á—É –∑–∞–¥–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–∞–π–ª—ã –∏ —Ç–æ–ª—å–∫–æ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∞–π–ª—ã.*',
          {
            parse_mode: 'Markdown',
            reply_markup: await this.botService.showHomeworkButton(),
          },
        );
      }
    } catch (err) {
      console.error(err.message);
    }
  }

  @Action(/submit-hm/)
  async enterSubmitHm(@Ctx() ctx: SceneContext & ISession) {
    await ctx.scene.enter('submitHomework');
  }
}
